# -*- coding: utf-8 -*-
"""food_deserts_obesity_spatial_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n9sJioLWorxsBePfkZ-CBmiQhU_h4b6C
"""

!pip install geopandas

!apt install python3-rtree

!pip install pysal

import geopandas as gpd
import pandas as pd

obesity_shape = gpd.read_file('Obesity_in_Adults_-_CDPHE_Community_Level_Estimates_(Census_Tracts).shp')
atlas = pd.read_csv('food_access_research_atlas.csv')
race = pd.read_csv('ACS_2019_race.csv')
mobility = pd.read_csv('ACS_2019_mobility.csv')
education = pd.read_csv('ACS_2019_education.csv')
poverty = pd.read_csv('ACS_2019_poverty.csv')
age_sex = pd.read_csv('ACS_2019_age_sex.csv')
pop = pd.read_csv('ACS_2019_population.csv')

# S0101_C01_032E - median age
# S0101_C01_033E - sex ratio (males per 100 females)

# population df
pop.rename(columns={'B01003_001E': 'population'}, inplace=True)

pop = pop[['GEO_ID', 'NAME', 'population']]

# mobility df

mobility.rename(columns={'B07003_004E': 'unmoved'}, inplace=True)

mobility = mobility[['GEO_ID', 'unmoved']]

# poverty df
poverty.rename(columns={'B17001_002E': 'poverty'}, inplace=True)

poverty = poverty[['GEO_ID', 'poverty']]

# race df
race.rename(columns={'B03002_003E': 'white'}, inplace=True)

race = race[['GEO_ID', 'white']]

# education df
hs_list = ['B15003_017E', 'B15003_018E', 'B15003_019E', 'B15003_020E', 'B15003_021E', 'B15003_022E', 'B15003_023E', 'B15003_024E', 'B15003_025E']
bach_list = ['B15003_022E', 'B15003_023E', 'B15003_024E', 'B15003_025E']

education['hs education'] = education[hs_list].sum(axis=1)
education['bachelors degree'] = education[bach_list].sum(axis=1)

educ = education[['GEO_ID', 'hs education', 'bachelors degree']]

# age & sex df
age_sex.rename(columns={'S0101_C01_032E': 'median age', 'S0101_C01_033E' : 'sex ratio'}, inplace=True)

age_sex = age_sex[['GEO_ID', 'median age', 'sex ratio']]

# joining all data
pop2 = pop.merge(mobility, on='GEO_ID')

pop3 = pop2.merge(poverty, on='GEO_ID')

pop4 = pop3.merge(race, on='GEO_ID')

pop5 = pop4.merge(educ, on='GEO_ID')

acs_pop = pop5.merge(age_sex, on='GEO_ID')

acs_pop['unmoved percent'] = (acs_pop['unmoved'] / acs_pop['population'])
acs_pop['poverty percent'] = (acs_pop['poverty'] / acs_pop['population'])
acs_pop['minority percent'] = 1 - (acs_pop['white'] / acs_pop['population'])
acs_pop['hs education percent'] = (acs_pop['hs education'] / acs_pop['population'])
acs_pop['bachelors degree percent'] = (acs_pop['bachelors degree'] / acs_pop['population'])

acs_pop['GEO_ID'] = acs_pop['GEO_ID'].str.slice(9, 20)

acs_pop.head()

atlas = atlas[atlas['State'] == 'Colorado']
atlas = atlas[['CensusTract', 'LA1and10', 'LAPOP1_10', 'POP2010']]
atlas['CensusTract'] = '0' + atlas[['CensusTract']].astype('str')

acs_pop_w_deserts = pd.merge(acs_pop, atlas, left_on='GEO_ID', right_on='CensusTract')
acs_pop_w_deserts['food desert percent'] = (acs_pop_w_deserts['LAPOP1_10'] / acs_pop_w_deserts['POP2010'])
acs_pop_w_deserts.drop(['CensusTract', 'POP2010'], axis=1, inplace=True)

acs_pop_w_deserts

CO = pd.merge(obesity_shape, acs_pop_w_deserts, left_on='Census_Tra', right_on='GEO_ID')

CO['Obese_Cens'] = (CO['Obese_Cens'] / 100)

CO

CO.columns

CO_trim = CO[['GEO_ID', 'Obese_Cens', 'population', 'median age', 'sex ratio', 'unmoved percent', 'poverty percent', 'minority percent', 'bachelors degree percent', 'LA1and10', 'food desert percent', 'geometry']]

CO_trim.columns

col_list = ['census tract', 'obesity percent', 'population', 'median age', 'sex ratio', 'unmoved percent', 'poverty percent', 'minority percent', 'bachelors degree percent', 'food desert exists', 'food desert percent', 'geometry']

CO_trim.columns = col_list

CO_trim.columns

CO_trim.head()

import matplotlib.pyplot as plt

CO_trim.plot()

import pysal
import mapclassify
import libpysal

# 7 census tracts with no population. removing them
CO_2 = CO_trim[CO_trim['population'] != 0]

# 2 census tracts with no obesity values, removing them too
CO_2[pd.isna(CO_2['obesity percent'])]

CO_3 = CO_2[~pd.isna(CO_2['obesity percent'])]

CO_3

# census tract 08043980100 has no sex ratio; i'm just going to remove this one last tract from the dataset

CO_3 = CO_3[CO_3['census tract'] != '08043980100']

w = libpysal.weights.Queen.from_dataframe(CO_3)
w

CO_3

CO_3['median age'] = CO_3[['median age']].astype('float')
CO_3['sex ratio'] = CO_3[['sex ratio']].astype('float')

CO_3[['median age', 'sex ratio', 'unmoved percent', 'poverty percent', 'minority percent', 'bachelors degree percent', 'food desert percent']].describe()

CO_3[['median age', 'sex ratio', 'unmoved percent', 'poverty percent', 'minority percent', 'bachelors degree percent', 'food desert percent']].corr()

with open('base_stats.tex', 'w') as tf:
  tf.write(CO_3[['median age', 'sex ratio', 'unmoved percent', 'poverty percent', 'minority percent', 'bachelors degree percent', 'food desert percent']].describe().to_latex())

with open('base_corr.tex', 'w') as tf:
  tf.write(CO_3[['median age', 'sex ratio', 'unmoved percent', 'poverty percent', 'minority percent', 'bachelors degree percent', 'food desert percent']].corr().to_latex())

fig, ax = plt.subplots(1,1)

CO_3.plot(column='obesity percent', ax=ax, cmap='YlOrRd', legend=True, legend_kwds={'label': 'Obesity Percentage', 'orientation': 'horizontal'})
fig.set_size_inches(16, 12)
fig.suptitle('Obesity by Census Tract in Colorado', fontsize=20)
plt.show()

fig, ax = plt.subplots(1,1)

CO_3.plot(column='food desert percent', cmap="YlOrRd", ax=ax, legend=True, legend_kwds={'label': 'Percentage of Pop in Food Desert', 'orientation': 'horizontal'})
fig.set_size_inches(16, 12)
fig.suptitle('Percent of Citizens Living in Food Deserts by Census Tract in Colorado', fontsize=20)
plt.show()

fig, ax = plt.subplots(1,1)

CO_3.plot(column='food desert exists', cmap="Blues", ax=ax)
fig.set_size_inches(16, 12)
fig.suptitle('Food Deserts by Census Tract in Colorado', fontsize=20)
plt.show()

fig, ax = plt.subplots(1,1)

CO_3.plot(column='bachelors degree percent', ax=ax, cmap='YlOrRd', legend=True, legend_kwds={'label': 'Bachelors Degree Percentage', 'orientation': 'horizontal'})
fig.set_size_inches(16, 12)
fig.suptitle('Bachelors Degree Percentage by Census Tract in Colorado', fontsize=20)
plt.show()

fig, ax = plt.subplots(1,1)

CO_3.plot(column='poverty percent', ax=ax, cmap='OrRd', legend=True, legend_kwds={'label': 'Poverty Percentage', 'orientation': 'horizontal'})
fig.set_size_inches(16, 12)
fig.suptitle('Poverty Percentage by Census Tract in Colorado', fontsize=20)
plt.show()

fig, ax = plt.subplots(1,1)

CO_3.plot(column='minority percent', ax=ax, cmap='YlOrRd', legend=True, legend_kwds={'label': 'Minority Percentage', 'orientation': 'horizontal'})
fig.set_size_inches(16, 12)
fig.suptitle('Non-White Percentage by Census Tract in Colorado', fontsize=20)
plt.show()

cardinalities = pd.Series(w.cardinalities)
cardinalities.plot(kind='hist', title='histogram of no. of neighbors');

with open('CO.gal', 'w') as fo:
    fo.write('w')

with open('CO.gal', 'r') as fo:
    new_w = fo.read()

from esda.moran import (Moran, Moran_Local, Moran_BV, Moran_Local_BV)

vars_list = ['obesity percent', 'population', 'median age', 'sex ratio', 'unmoved percent', 'poverty percent', 'minority percent', 'bachelors degree percent', 'food desert percent']

def Morans_DF_Build(x):
  l = []
  l.append(x)
  morans_i = Moran((CO_3[x]), w)

  l.append(morans_i.I)
  l.append(morans_i.p_sim)

  return l

Morans_List = []
for item in vars_list:
  Morans_List.append(Morans_DF_Build(item))

df = pd.DataFrame(Morans_List, columns=['Variable Name', 'Morans I', 'Significance'])

df

df.to_latex()

with open('morans.tex', 'w') as tf:
  tf.write(df.to_latex())

mi_obesity = Moran(CO_3['obesity percent'], w)

from splot.esda import (moran_scatterplot, lisa_cluster, plot_local_autocorrelation)

fig, ax = moran_scatterplot(mi_obesity)
fig.set_size_inches(12, 8)
ax.set_xlabel('Obesity')
plt.text(4, 2, "HH", fontsize=25)
plt.text(4, -3, "HL", fontsize=25)
plt.text(-3, 2, "LH", fontsize=25)
plt.text(-3, -3, "LL", fontsize=25)
plt.show()

lisa_obs = Moran_Local(CO_3['obesity percent'], w)

fig, ax = moran_scatterplot(lisa_obs, p=.01,);
fig.set_size_inches(12, 8)
ax.set_xlabel('Obesity')
plt.show()

lisa_fd = Moran_Local(CO_3['food desert percent'], w)

fig, ax = moran_scatterplot(lisa_fd, p=.01,);
fig.set_size_inches(12, 8)
ax.set_xlabel('Food Desert Percent')
plt.show()

lisa_educ = Moran_Local(CO_3['bachelors degree percent'], w)

#moran_scatterplot(lisa_educ, p=.01);

fig, ax = moran_scatterplot(lisa_educ, p=.01,);
fig.set_size_inches(12, 8)
ax.set_xlabel('Bachelors Degree Education Level')
plt.show()

lisa_pov = Moran_Local(CO_3['poverty percent'], w)

fig, ax = moran_scatterplot(lisa_pov, p=.01,);
fig.set_size_inches(12, 8)
ax.set_xlabel('Poverty Percent')
plt.show()

lisa_min = Moran_Local(CO_3['minority percent'], w)

fig, ax = moran_scatterplot(lisa_min, p=.01,);
fig.set_size_inches(12, 8)
ax.set_xlabel('Non-White Percent')
plt.show()

lisa_cluster(lisa_obs, CO_3, p=.01);

fig, ax = lisa_cluster(lisa_obs, CO_3, p=.01)

ax.set_title("LISA Clusters: Obesity in Colorado", size=18)
fig.set_size_inches(16, 12)
plt.show()

fig, ax = lisa_cluster(lisa_educ, CO_3, p=.01)

ax.set_title("LISA Clusters: Educational Attainment in Colorado", size=18)
fig.set_size_inches(16, 12)
plt.show()

fig, ax = lisa_cluster(lisa_pov, CO_3, p=.01)

ax.set_title("LISA Clusters: Poverty in Colorado", size=18)
fig.set_size_inches(16, 12)
plt.show()

fig, ax = lisa_cluster(lisa_min, CO_3, p=.01)

ax.set_title("LISA Clusters: Non-White Racial/Ethnic Minorities in Colorado", size=18)
fig.set_size_inches(16, 12)
plt.show()

fig, ax = lisa_cluster(lisa_fd, CO_3, p=.01)

ax.set_title("LISA Clusters: Food Desert Percent in Colorado", size=18)
fig.set_size_inches(16, 12)
plt.show()

plot_local_autocorrelation(lisa_obs,CO_3,'obesity_percent', p=.01);

!pip install mapclassify
!apt-get install libproj-dev proj-data proj-bin
!apt-get install libgeos-dev
!pip install geoplot
!pip install stargazer

# Model 1 Approach:
# Run OLS models in areas only with and only without food deserts & compare

y = 'obesity percent'
x = ['median age', 'sex ratio', 'unmoved percent', 'poverty percent', 'minority percent', 'bachelors degree percent']

# for stats models api
xcoef = ['constant', 'median age', 'sex ratio', 'unmoved percent', 'poverty percent', 'minority percent', 'bachelors degree percent']

CO_food_deserts = CO_3[CO_3['food desert exists'] == 1]
CO_non_food_deserts = CO_3[CO_3['food desert exists'] == 0]

Y_fd = CO_food_deserts[y]
X_fd = CO_food_deserts[x]

Y_nfd = CO_non_food_deserts[y]
X_nfd = CO_non_food_deserts[x]

pd.set_option('display.float_format', lambda x: '%.3f' % x)

CO_food_deserts[x].describe()

CO_food_deserts[x].corr()

CO_non_food_deserts[x].describe()

CO_non_food_deserts[x].corr()

with open('fd_stats.tex', 'w') as tf:
  tf.write(CO_food_deserts[x].describe().to_latex())

with open('fd_corr.tex', 'w') as tf:
  tf.write(CO_food_deserts[x].corr().to_latex())

with open('nfd_stats.tex', 'w') as tf:
  tf.write(CO_non_food_deserts[x].describe().to_latex())

with open('nfd_corr.tex', 'w') as tf:
  tf.write(CO_non_food_deserts[x].corr().to_latex())

import statsmodels.api as sm

X_nfd = sm.add_constant(X_nfd)
lr = sm.OLS(Y_nfd, X_nfd).fit()
lr.summary(xname=xcoef)

X_fd = sm.add_constant(X_fd)
lr_fd = sm.OLS(Y_fd, X_fd).fit()
lr_fd.summary(xname=xcoef)

from stargazer.stargazer import Stargazer

sg1 = Stargazer([lr, lr_fd])

sg1.render_latex()

with open('method1.tex', 'w') as tf:
  tf.write(sg1.render_latex())

# Method 2 - Interactions
from sklearn.preprocessing import PolynomialFeatures

interaction = PolynomialFeatures(degree=2, include_bias=False, interaction_only=True)

x2 = ['median age', 'sex ratio', 'unmoved percent', 'poverty percent', 'minority percent', 'bachelors degree percent', 'food desert percent']

Y = CO_3[y]
X = CO_3[x2]

X_inter = pd.DataFrame(interaction.fit_transform(X), columns=interaction.get_feature_names(input_features=['median age', 'sex ratio', 'unmoved percent', 'poverty percent', 'minority percent', 'bachelors degree percent', 'food desert percent']))

X_inter.columns

X_inter_2 = X_inter[['median age', 'sex ratio', 'unmoved percent', 'poverty percent', 'minority percent', 'bachelors degree percent', 'food desert percent', 'bachelors degree percent food desert percent']]

X_inter_3 = X_inter[['median age', 'sex ratio', 'unmoved percent', 'poverty percent', 'minority percent', 'bachelors degree percent', 'food desert percent', 'poverty percent food desert percent']]

X_inter_4 = X_inter[['median age', 'sex ratio', 'unmoved percent', 'poverty percent', 'minority percent', 'bachelors degree percent', 'food desert percent', 'minority percent food desert percent']]

X_inter_5 = X_inter[['median age', 'sex ratio', 'unmoved percent', 'poverty percent', 'minority percent', 'bachelors degree percent', 'food desert percent', 'bachelors degree percent food desert percent', 'poverty percent food desert percent', 'minority percent food desert percent']]

xi1 = ['median age', 'sex ratio', 'unmoved percent', 'poverty percent', 'minority percent', 'bachelors degree percent', 'food desert percent', 'bachelors degree percent food desert percent']

Xi1 = X_inter_2[xi1]

xi2 = ['median age', 'sex ratio', 'unmoved percent', 'poverty percent', 'minority percent', 'bachelors degree percent', 'food desert percent', 'poverty percent food desert percent']

Xi2 = X_inter_3[xi2]

xi3 = ['median age', 'sex ratio', 'unmoved percent', 'poverty percent', 'minority percent', 'bachelors degree percent', 'food desert percent', 'minority percent food desert percent']

Xi3 = X_inter_4[xi3]

xi4 = ['median age', 'sex ratio', 'unmoved percent', 'poverty percent', 'minority percent', 'bachelors degree percent', 'food desert percent', 'bachelors degree percent food desert percent', 'poverty percent food desert percent', 'minority percent food desert percent']

Xi4 = X_inter_5[xi4]

X_c = sm.add_constant(X)
lr_base = sm.OLS(Y, X_c).fit()

#xcoef_lr_base = ['constant', 'median age', 'sex ratio', 'unmoved percent', 'poverty percent', 'minority percent', 'bachelors degree percent', 'food desert percent']

lr_base.summary()

Yi = Y.reset_index()['obesity percent']

Xi1_c = sm.add_constant(Xi1)
lr_i1 = sm.OLS(Yi, Xi1_c).fit()

#xcoef_lr_int = ['constant', 'median_age', 'sex_ratio', 'unmoved_percent', 'poverty_percent', 'minority_percent', 'bachelors_degree_percent', 'food_desert_percent', 'bd_fd_percent']

lr_i1.summary()

Xi2_c = sm.add_constant(Xi2)
lr_i2 = sm.OLS(Yi, Xi2_c).fit()

#xcoef_lr_int = ['constant', 'median_age', 'sex_ratio', 'unmoved_percent', 'poverty_percent', 'minority_percent', 'bachelors_degree_percent', 'food_desert_percent', 'bd_fd_percent']

lr_i2.summary()

Xi3_c = sm.add_constant(Xi3)
lr_i3 = sm.OLS(Yi, Xi3_c).fit()

#xcoef_lr_int = ['constant', 'median_age', 'sex_ratio', 'unmoved_percent', 'poverty_percent', 'minority_percent', 'bachelors_degree_percent', 'food_desert_percent', 'bd_fd_percent']

lr_i3.summary()

Xi4_c = sm.add_constant(Xi4)
lr_i4 = sm.OLS(Yi, Xi4_c).fit()

#xcoef_lr_int = ['constant', 'median_age', 'sex_ratio', 'unmoved_percent', 'poverty_percent', 'minority_percent', 'bachelors_degree_percent', 'food_desert_percent', 'bd_fd_percent']

lr_i4.summary()

from statsmodels.stats.anova import anova_lm

# w = libpysal.weights.Queen.from_dataframe(CO_3)
# w
anovaResults1 = anova_lm(lr_base, lr_i1)
print(anovaResults1)

anovaResults2 = anova_lm(lr_base, lr_i2)
print(anovaResults2)

anovaResults3 = anova_lm(lr_base, lr_i3)
print(anovaResults3)

anovaResults4 = anova_lm(lr_base, lr_i4)
print(anovaResults4)

# Method 3 - spatial models

import spreg

y = 'obesity percent'
x = ['median age', 'sex ratio', 'unmoved percent', 'poverty percent', 'minority percent', 'bachelors degree percent', 'food desert percent']

Y = CO_3[y].values.reshape(len(CO_3),1) #add dimension for spreg OLS DV
X = CO_3[x].values

w.n

ols=spreg.OLS(Y, X, w=w, \
                          name_y="Obesity", name_x=['median age', 'sex ratio', 'unmoved percent', 'poverty percent', 'minority percent', 'bachelors degree percent', 'food desert percent'], name_w="queen's continuity",\
                          nonspat_diag=True, #print stats
                          spat_diag=True,  #print Lagrange multiplier tests 
                          moran=True)  # compute Moran’s I on the residuals
print(ols.summary)

serror = spreg.ML_Error(Y, X, w=w,  name_y="Obesity", name_x=['median age', 'sex ratio', 'unmoved percent', 'poverty percent', 'minority percent', 'bachelors degree percent', 'food desert percent'], name_w="queen's continuity")
print(serror.summary)

slag = spreg.ML_Lag(Y, X, w=w,  name_y="Obesity", name_x=['median age', 'sex ratio', 'unmoved percent', 'poverty percent', 'minority percent', 'bachelors degree percent', 'food desert percent'], name_w="queen's continuity")
print(slag.summary)